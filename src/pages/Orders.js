import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { BASE_URL } from '../config';
import { useAdminAuth } from '../../src/contexts/AdminAuthContext';
import './StyleWeb/OrderList.css';
import { Link } from 'react-router-dom';


const statusMap = {
  pending: 'Ch·ªù x√°c nh·∫≠n',
  confirmed: 'ƒê√£ x√°c nh·∫≠n',
  processing: 'ƒêang l·∫•y h√†ng',
  shipping: 'ƒêang giao h√†ng',
  delivered: 'ƒê√£ giao h√†ng',
  cancelled: 'ƒê√£ hu·ª∑',
};



export default function OrderList() {
  const { adminToken } = useAdminAuth();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [statusFilter, setStatusFilter] = useState('');
  const [sortOrder, setSortOrder] = useState('desc');

  useEffect(() => {
    console.log("üîê Token:", adminToken);
    if (adminToken) {
      fetchOrders();
    }
  }, [statusFilter, sortOrder, adminToken]);

  const fetchOrders = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${BASE_URL}/api/orders/admin/orders`, {
        headers: { Authorization: `Bearer ${adminToken}` },
        params: {
          status: statusFilter,
          sort: sortOrder,
        },
      });
      setOrders(res.data);
    } catch (err) {
      console.error('L·ªói khi t·∫£i ƒë∆°n h√†ng:', err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="order-page">
      <h1>ƒê∆°n h√†ng</h1>

      {!adminToken ? (
        <div className="text-red-500 mt-4">B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p.</div>
      ) : (
        <>
          {/* B·ªô l·ªçc */}
          <div className="order-filters">
            <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
              <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
              <option value="pending">Ch·ªù x√°c nh·∫≠n</option>
              <option value="confirmed">ƒê√£ x√°c nh·∫≠n</option>
              <option value="processing">ƒêang l·∫•y h√†ng</option>
              <option value="shipping">ƒêang giao h√†ng</option>
              <option value="delivered">ƒê√£ giao h√†ng</option>
              <option value="cancelled">ƒê√£ hu·ª∑</option>
            </select>

            <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>
              <option value="desc">M·ªõi nh·∫•t</option>
              <option value="asc">C≈© nh·∫•t</option>
            </select>
            <button onClick={fetchOrders}>L√†m m·ªõi</button>
          </div>

          {/* B·∫£ng ƒë∆°n h√†ng */}
          <div className="overflow-x-auto">
            <table className="order-table">
              <thead>
                <tr>
                  <th>M√£ ƒë∆°n</th>
                  <th>Kh√°ch h√†ng</th>
                  <th>T·ªïng ti·ªÅn</th>
                  <th>Tr·∫°ng th√°i</th>
                  <th>Ng√†y ƒë·∫∑t</th>
                  <th>Thanh to√°n</th>
                  <th>H√†nh ƒë·ªông</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td colSpan="7" className="text-center py-4">ƒêang t·∫£i ƒë∆°n h√†ng...</td>
                  </tr>
                ) : orders.length === 0 ? (
                  <tr>
                    <td colSpan="7" className="text-center py-4 text-gray-500">
                      Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.
                    </td>
                  </tr>
                ) : (
                  orders.map((order) => (
                    <tr key={order._id}>
                      <td className="text-blue-500 font-medium hover:underline cursor-pointer">
                        {order.order_code || `#${order._id.slice(-6).toUpperCase()}`}
                      </td>
                      <td>{order.user_id?.full_name || '·∫®n danh'}</td>
                      <td>{order.total_amount?.toLocaleString()} VND</td>
                      <td>
                        <span className={`status-label status-${order.status}`}>
                          {statusMap[order.status] || 'Kh√¥ng r√µ'}
                        </span>
                      </td>
                      <td>{new Date(order.createdAt).toLocaleString()}</td>
                      <td>
                        <span className={`payment-tag ${order.payment_method === 'momo' ? 'online' : 'cod'}`}>
                          {order.payment_method === 'momo' ? 'ONLINE' : 'COD'}
                        </span>
                      </td>
                      <td>
                        <Link to={`/admin/orders/${order._id}`} className="order-action-btn">
                          Chi ti·∫øt
                        </Link>

                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </>
      )}
    </div>
  );
}
