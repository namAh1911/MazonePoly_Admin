import React, { useState, useEffect } from "react";
import "./StyleWeb/Category.css";
import axios from "axios";

export default function CategoryPage() {
    const [categories, setCategories] = useState([]);
    const [name, setName] = useState("");
    const [message, setMessage] = useState("");
    const [editingId, setEditingId] = useState(null);
    const [editedName, setEditedName] = useState("");


    // Fetch danh s√°ch danh m·ª•c
    const fetchCategories = async () => {
        try {
            const res = await axios.get("http://localhost:5000/api/categories");
            setCategories(res.data);
        } catch (err) {
            console.error("L·ªói khi l·∫•y danh m·ª•c:", err);
            setMessage("Kh√¥ng th·ªÉ t·∫£i danh m·ª•c");
        }
    };

    // Th√™m danh m·ª•c m·ªõi
    const handleAdd = async () => {
        if (!name.trim()) {
            setMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n danh m·ª•c.");
            return;
        }

        try {
            await axios.post("http://localhost:5000/api/categories", { name });
            setName("");
            setMessage("‚úÖ Th√™m danh m·ª•c th√†nh c√¥ng!");
            fetchCategories();
        } catch (err) {
            setMessage(err.response?.data?.message || "L·ªói khi th√™m danh m·ª•c");
        }
    };
    //X√≥a
    const handleDelete = async (id) => {
        const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° danh m·ª•c n√†y?");
        if (!confirmDelete) return;

        try {
            await axios.delete(`http://localhost:5000/api/categories/${id}`);
            fetchCategories(); // Refresh l·∫°i danh s√°ch
        } catch (err) {
            alert("Kh√¥ng th·ªÉ xo√° danh m·ª•c!");
            console.error(err);
        }
    };
    //S·ª≠a
    const handleUpdate = async (id) => {
        if (!editedName.trim()) return;

        try {
            await axios.put(`http://localhost:5000/api/categories/${id}`, {
                name: editedName,
            });
            setEditingId(null); // Tho√°t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
            fetchCategories();  // T·∫£i l·∫°i danh s√°ch
        } catch (err) {
            alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c");
            console.error(err);
        }
    };



    useEffect(() => {
        fetchCategories();
    }, []);

    return (
        <div className="category-container">
            <h2>Qu·∫£n l√Ω danh m·ª•c lo·∫°i s·∫£n ph·∫©m</h2>

            <div className="category-header">
                <input
                    type="text"
                    placeholder="Nh·∫≠p t√™n danh m·ª•c m·ªõi"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
                <button className="save-btn" onClick={handleAdd}>
                    Th√™m
                </button>
            </div>

            {message && <div className="message-box">{message}</div>}

            <table className="category-table">
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>T√™n danh m·ª•c</th>
                        <th>Slug</th>
                        <th>H√†nh ƒë·ªông</th>
                    </tr>
                </thead>
                <tbody>
                    {categories.map((cat, index) => (
                        <tr key={cat._id} className={index % 2 === 0 ? "even-row" : ""}>
                            <td>{index + 1}</td>
                            <td>
                                {editingId === cat._id ? (
                                    <input
                                        value={editedName}
                                        onChange={(e) => setEditedName(e.target.value)}
                                    />
                                ) : (
                                    cat.name
                                )}
                            </td>
                            <td>{cat.slug}</td>
                            <td>
                                {editingId === cat._id ? (
                                    <>
                                        <button className="save-btn" onClick={() => handleUpdate(cat._id)}>L∆∞u</button>
                                        <button className="cancel-btn" onClick={() => setEditingId(null)}>H·ªßy</button>
                                    </>
                                ) : (
                                    <>
                                        <button
                                            className="edit-btn"
                                            onClick={() => {
                                                setEditingId(cat._id);
                                                setEditedName(cat.name);
                                            }}
                                        >‚úèÔ∏è</button>
                                        <button className="delete-btn" onClick={() => handleDelete(cat._id)}>üóëÔ∏è</button>
                                    </>
                                )}
                            </td>
                        </tr>
                    ))}


                </tbody>
            </table>

            <div className="pagination">
                <button disabled>Trang 1/1</button>
                <button className="next-btn" disabled>Trang sau</button>
            </div>
        </div>
    );
}
